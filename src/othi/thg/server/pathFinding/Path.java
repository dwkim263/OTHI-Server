/**
 * Copyright (c) 2010, The Project OTHI
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright 
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in 
 *      the documentation and/or other materials provided with the 
 *      distribution.
 *    * Neither the name of the OTHI nor the names of its contributors 
 *      may be used to endorse or promote products derived from this 
 *      software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 */

package othi.thg.server.pathFinding;

import java.io.Serializable;

import othi.thg.server.THGServerDefault;

/**
 * A path from one point to another generated by the path finding code
 * 
 * @author Kevin Glass
 * @author Dong Won Kim
 */
public class Path implements Serializable {
	
	private static final long serialVersionUID = 20070812112327L;     
	/** The path coordinates */
	private Step[] path = new Step [THGServerDefault.PATH_SEARCH_DEPTH];
	/** The size of the path */
	private int size;

	/**
	 * Create a new empty path
	 */
	public Path() {
	}

	/**
	 * 
	 * @param x The x coordinate of the point
	 * @param y The y coordinate of the point
	 * Written by Dong Won Kim on March 8,2008
	 */
	public void appendStep(int x, int y) {
		path[size] = new Step(x,y);
		size++;
	}

	/**
	 * 
	 * @param index The index of the point to retrieve
	 * @return The step information, the position on the map
	 * Written by Dong Won Kim on March 8,2008
	 */
	Path.Step getStep(int index) {
		Step step = path[index];
		if (step != null) return step;
		else return null;
	}

	/**
	 * Get the X coordinate of the point at the specified index
	 * 
	 * @param index The index of the point to retrieve 
	 * @return The x coordinate of the point at the specified index
	 * Modified by Dong Won Kim on March 8,2008
	 */
	public int getX(int index) {
		return path[index].getX();
	}

	/**
	 * Get the Y coordinate of the point at the specified index
	 * 
	 * @param index The index of the point to retrieve 
	 * @return The y coordinate of the point at the specified index
	 * Modified by Dong Won Kim on March 8,2008
	 */
	public int getY(int index) {
		return path[index].getY();
	}

	/**
	 * Get the size/length of the path
	 * 
	 * @return The size of the path
	 */
	public int getSize() {
		return size;
	}

	//Written by Dong Won Kim on March 8, 2008        
	private class Step implements Serializable {
		/**
		 * 
		 */
		private static final long serialVersionUID = 3370549939477540824L;
		
		private int x;
		private int y;

		private Step(int x, int y) {
			this.x = x;
			this.y = y;
		}

		private int getX(){
			return x;
		}

		private int getY(){
			return y;
		}            
	}
}
